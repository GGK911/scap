package com.cn.msca.utl;

import cn.com.mcsca.pki.core.bouncycastle.asn1.x509.SubjectPublicKeyInfo;
import cn.com.mcsca.pki.core.bouncycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey;
import cn.com.mcsca.pki.core.bouncycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;
import cn.com.mcsca.pki.core.bouncycastle.jce.provider.BouncyCastleProvider;
import cn.com.mcsca.pki.core.bouncycastle.pkcs.PKCS10CertificationRequest;
import cn.com.mcsca.pki.core.bouncycastle.util.encoders.Base64;
import cn.com.msca.util.KeyUtil;

import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.Provider;
import java.security.PublicKey;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.security.spec.X509EncodedKeySpec;

/**
 * @author TangHaoKai
 * @version V1.0 2024/11/8 16:14
 */
public class KeyUtilTest {
    private static final Provider BC = new BouncyCastleProvider();

    public static void main(String[] args) throws Exception {
        String sm2Pri = "MIGTAgEAMBMGByqGSM49AgEGCCqBHM9VAYItBHkwdwIBAQQgBGo3dacOLVg9J1uGZxZ77QFduzZL+R//vve5v79vSS6gCgYIKoEcz1UBgi2hRANCAASbduQKgJpAnGb7OjWG9Cecy3wwvLn4LG6RBnU0Fk5NLdx9fmVrZ9jIZeBFCCPUDY7+brA3g/PVj6dAVJhWdE8R";
        String alg = KeyUtil.getAlgFromPriKeyOrPubKey(Base64.decode(sm2Pri));
        KeyUtil.getAlgFromPriKeyOrPubKey(Base64.decode("MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCpkozkHHw8jRbbXVqO48t1yqOO1JZnQmBo1rXa1ck58N3CdSITxNHHFrkOgmqSbpeSgQ+algVvrZTO8MId+A3QiNt1s+SrPb/QBeQs+NpyToJ4wmSX1iK45ex//zt5kRAfzwDhjIRSzIVjXyUfUj33KzRjp8y0VY0w89br8iZXrwIDAQAB"));
        BCECPrivateKey privateKey = (BCECPrivateKey) KeyUtil.parsePriKey(sm2Pri);

        byte[] signValue = KeyUtil.sm2Sign(privateKey, "1234".getBytes(StandardCharsets.UTF_8), null);
        String signValueBase64 = Base64.toBase64String(signValue);
        System.out.println(String.format("%-16s", "signValueBase64>> ") + signValueBase64);

        KeyFactory keyFact = KeyFactory.getInstance("EC", BC);

        // 从P10拿公钥
        String P10 = "MIIBQjCB6QIBADCBhjEPMA0GA1UECAwG6YeN5bqGMQ8wDQYDVQQHDAbph43luoYxIjAgBgkqhkiG9w0BCQEWEzEzOTgzMDUzNDU1QDE2My5jb20xCzAJBgNVBAYTAkNOMQ8wDQYDVQQKEwZHR0s5MTExDzANBgNVBAsTBkdHSzkxMTEPMA0GA1UEAxMGR0dLOTExMFkwEwYHKoZIzj0CAQYIKoEcz1UBgi0DQgAE9jdVHgMaJmGbdmHpAjjZX9w5LQaZc4sQwCdAeImpPquatiLRuOIg/49lSGdUk9urydKLlLzcDWO0lXJqSNVauaAAMAoGCCqBHM9VAYN1A0gAMEUCIE7q8pezVi8gRbx4oaisHkio3pJlfcnywKfIg6qxVQLQAiEA0vUXx0pbS3Eu2Bz0f/QIYG44p0efZn/x/2uWTmj3IAA=";
        PKCS10CertificationRequest pkcs10CertificationRequest = new PKCS10CertificationRequest(Base64.decode(P10));
        SubjectPublicKeyInfo subjectPublicKeyInfo = pkcs10CertificationRequest.getSubjectPublicKeyInfo();
        BCECPublicKey publicKey = (BCECPublicKey) keyFact.generatePublic(new X509EncodedKeySpec(subjectPublicKeyInfo.getEncoded()));

        // 从公钥证书拿公钥
        String publicKeyCert = "MIICsDCCAlOgAwIBAgIQGOjscdxYHn/RySLkMEHObjAMBggqgRzPVQGDdQUAMC0xCzAJBgNVBAYTAkNOMQ4wDAYDVQQKDAVNQ1NDQTEOMAwGA1UEAwwFTUNTQ0EwHhcNMjQxMTA4MDYxNjU0WhcNMjUxMTA4MDYxNjU0WjBiMQswCQYDVQQGEwJDTjEjMCEGCSqGSIb3DQEJARYUemhhbmdzYW5AZXhhbXBsZS5jb20xLjAsBgNVBAMMJTEyMzQ1NkDlvKDkuIlAMDUyMjEyMTIwMDEwMzIxNjIxNkAwMDIwWTATBgcqhkjOPQIBBggqgRzPVQGCLQNCAAQNUeI6+ybG01Rgm42xBWqPgjuwQ6bW5dFTCRZ9mvMamzpz4zCG0tTBpWBLVVjbB2/vOc3AKlwBQ5Dvpbu3zp8Go4IBHDCCARgwCwYDVR0PBAQDAgTwMAwGA1UdEwQFMAMBAQAwHwYDVR0jBBgwFoAU8SIKZ5iN9eOyqsMXa8BCH75LvXYwHQYDVR0OBBYEFOkMnFGqbMBY9LBtPehsA6NLbApoMIG6BgNVHR8EgbIwga8wLqAsoCqGKGh0dHA6Ly93d3cubWNzY2EuY29tLmNuL3NtMi9jcmwvY3JsMC5jcmwwfaB7oHmGd2xkYXA6Ly93d3cubWNzY2EuY29tLmNuOjM4OS9DTj1jcmwwLE9VPUNSTCxPPU1DU0NBLEM9Q04/Y2VydGlmaWNhdGVSZXZvY2F0aW9uTGlzdD9iYXNlP29iamVjdGNsYXNzPWNSTERpc3RyaWJ1dGlvblBvaW50MAwGCCqBHM9VAYN1BQADSQAwRgIhAMDAW6xDWH7i/ekgyP1YFi9KnoOVWPbBPiv4SokJS8MQAiEA3SlB30S3FcKoFY6Vv3PIXKrySEp29LTE0tZm8lO75Zs=";
        CertificateFactory certFact = CertificateFactory.getInstance("X.509", new BouncyCastleProvider());
        X509Certificate certificate = (X509Certificate) certFact.generateCertificate(new ByteArrayInputStream(Base64.decode(publicKeyCert)));
        publicKey = (BCECPublicKey) certificate.getPublicKey();

        byte[] message = Base64.decode("");
        byte[] signBytes = Base64.decode("MEQCID8f/GH756JT4qs72LbTk00MDxuk6CwyghSJ4n4HcXlHAiAmOgr+olBdNZYl7Z7lgjlf08ZrvCjUYSMB0wWuGO7/EQ==");


        boolean verifySign = KeyUtil.sm2VerifySign(publicKey, message, signBytes, null);
        System.out.println(String.format("%-16s", "verifySign>> ") + verifySign);

        boolean matchSM2PriAndPub = KeyUtil.matchSM2PriAndPub(privateKey, publicKey);
        System.out.println(String.format("%-16s", "matchSM2PriAndPub>> ") + matchSM2PriAndPub);

        KeyPair keyPair = cn.com.mcsca.pki.core.util.KeyUtil.generateKeyPair("SM2", 256);
        String pri = Base64.toBase64String(keyPair.getPrivate().getEncoded());
        String pub = Base64.toBase64String(keyPair.getPublic().getEncoded());

        boolean matchSM2PriAndPub1 = KeyUtil.matchSM2PriAndPub(pri, pub);
        System.out.println(String.format("%-16s", "matchSM2PriAndPub1>> ") + matchSM2PriAndPub1);

        KeyUtil.extraPublicKeyFromCSR("MIIBQjCB6QIBADCBhjEPMA0GA1UECAwG6YeN5bqGMQ8wDQYDVQQHDAbph43luoYxIjAgBgkqhkiG9w0BCQEWEzEzOTgzMDUzNDU1QDE2My5jb20xCzAJBgNVBAYTAkNOMQ8wDQYDVQQKEwZHR0s5MTExDzANBgNVBAsTBkdHSzkxMTEPMA0GA1UEAxMGR0dLOTExMFkwEwYHKoZIzj0CAQYIKoEcz1UBgi0DQgAE9jdVHgMaJmGbdmHpAjjZX9w5LQaZc4sQwCdAeImpPquatiLRuOIg/49lSGdUk9urydKLlLzcDWO0lXJqSNVauaAAMAoGCCqBHM9VAYN1A0gAMEUCIE7q8pezVi8gRbx4oaisHkio3pJlfcnywKfIg6qxVQLQAiEA0vUXx0pbS3Eu2Bz0f/QIYG44p0efZn/x/2uWTmj3IAA=");
        KeyUtil.extraPublicKeyFromCert("MIICsDCCAlOgAwIBAgIQGOjscdxYHn/RySLkMEHObjAMBggqgRzPVQGDdQUAMC0xCzAJBgNVBAYTAkNOMQ4wDAYDVQQKDAVNQ1NDQTEOMAwGA1UEAwwFTUNTQ0EwHhcNMjQxMTA4MDYxNjU0WhcNMjUxMTA4MDYxNjU0WjBiMQswCQYDVQQGEwJDTjEjMCEGCSqGSIb3DQEJARYUemhhbmdzYW5AZXhhbXBsZS5jb20xLjAsBgNVBAMMJTEyMzQ1NkDlvKDkuIlAMDUyMjEyMTIwMDEwMzIxNjIxNkAwMDIwWTATBgcqhkjOPQIBBggqgRzPVQGCLQNCAAQNUeI6+ybG01Rgm42xBWqPgjuwQ6bW5dFTCRZ9mvMamzpz4zCG0tTBpWBLVVjbB2/vOc3AKlwBQ5Dvpbu3zp8Go4IBHDCCARgwCwYDVR0PBAQDAgTwMAwGA1UdEwQFMAMBAQAwHwYDVR0jBBgwFoAU8SIKZ5iN9eOyqsMXa8BCH75LvXYwHQYDVR0OBBYEFOkMnFGqbMBY9LBtPehsA6NLbApoMIG6BgNVHR8EgbIwga8wLqAsoCqGKGh0dHA6Ly93d3cubWNzY2EuY29tLmNuL3NtMi9jcmwvY3JsMC5jcmwwfaB7oHmGd2xkYXA6Ly93d3cubWNzY2EuY29tLmNuOjM4OS9DTj1jcmwwLE9VPUNSTCxPPU1DU0NBLEM9Q04/Y2VydGlmaWNhdGVSZXZvY2F0aW9uTGlzdD9iYXNlP29iamVjdGNsYXNzPWNSTERpc3RyaWJ1dGlvblBvaW50MAwGCCqBHM9VAYN1BQADSQAwRgIhAMDAW6xDWH7i/ekgyP1YFi9KnoOVWPbBPiv4SokJS8MQAiEA3SlB30S3FcKoFY6Vv3PIXKrySEp29LTE0tZm8lO75Zs=");

        int keyLengthFromPublicKey = KeyUtil.getKeyLengthFromPublicKey(pub);
        System.out.println(keyLengthFromPublicKey);

    }
}
